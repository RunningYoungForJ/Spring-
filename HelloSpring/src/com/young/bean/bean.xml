<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	 <bean id="singletonHelloWorld" class="com.young.simple.HelloWorld" 
	      scope="singleton">
	   </bean>
	   
	<bean id="prototypeHelloWorld" class="com.young.simple.HelloWorld"
		scope="prototype">
	</bean>
	   
	<!-- 
	Bean 定义
		被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的，例如，已经在先前章节看到的，在 XML 的表单中的 定义。
		
		bean 定义包含称为配置元数据的信息，下述容器也需要知道配置元数据：
		
		如何创建一个 bean
		
		bean 的生命周期的详细信息
		
		bean 的依赖关系
	
	每一个bean定义在一个bean标签中，bean标签中的属性如下：
		class	这个属性是强制性的，并且指定用来创建 bean 的 bean 类。
		name	这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。
		scope	这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。
		constructor-arg	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
		properties	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
		autowiring mode	它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
		lazy-initialization mode	延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。
		initialization 方法	在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。
		destruction 方法	当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。
	Spring 配置元数据
	Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：
	
		基于 XML 的配置文件。
		
		基于注解的配置
		
		基于 Java 的配置
		
	Bean 的作用域
		当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，你应该声明 bean 的作用域的属性为 singleton。
		
		Spring 框架支持以下五个作用域，如果你使用 web-aware ApplicationContext 时，其中三个是可用的。

	Bean的几种作用域
		singleton	该作用域将 bean 的定义的限制在每一个 Spring IoC 容器中的一个单一实例(默认)。
		prototype	该作用域将单一 bean 的定义限制在任意数量的对象实例。
		request	该作用域将 bean 的定义限制为 HTTP 请求。只在 web-aware Spring ApplicationContext 的上下文中有效。
		session	该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。
		global-session	该作用域将 bean 的定义限制为全局 HTTP 会话。只在 web-aware Spring ApplicationContext 的上下文中有效。

	singleton 作用域：
		如果作用域设置为 singleton，那么 Spring IoC 容器刚好创建一个由该 bean 定义的对象的实例。该单一实例将存储在这种单例 bean 的高速缓存中，以及针对该 bean 的所有后续的请求和引用都返回缓存对象。

		默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性为 singleton。
		
	prototype 作用域：
		如果作用域设置为 prototype，那么每次特定的 bean 发出请求时 Spring IoC 容器就创建对象的新的 Bean 实例。一般说来，满状态的 bean 使用 prototype 作用域和没有状态的 bean 使用 singleton 作用域。
		
		为了定义 prototype 作用域，你可以在 bean 的配置文件中设置作用域的属性为 prototype。
	 -->
   
 
</beans>